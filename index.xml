<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home of Mia 👋 on VISIONARY</title><link>https://blog.visionary.top/</link><description>Recent content in Home of Mia 👋 on VISIONARY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.visionary.top/index.xml" rel="self" type="application/rss+xml"/><item><title>es6 新语法 - 2019 &amp; 2020</title><link>https://blog.visionary.top/blog/js/es6/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/es6/</guid><description/></item><item><title>Hooks使用</title><link>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/hooks/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/hooks/</guid><description>&lt;blockquote>
&lt;p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）,而并非强制按照生命周期划分&lt;/p>
&lt;/blockquote></description></item><item><title>JavaScript 内存泄漏</title><link>https://blog.visionary.top/blog/qa/javascript-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/javascript-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</guid><description>&lt;p>1&lt;/p></description></item><item><title>q&amp;a</title><link>https://blog.visionary.top/blog/qa/qa/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/qa/</guid><description>&lt;p>1&lt;/p></description></item><item><title>redux 相关</title><link>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/redux/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/redux/</guid><description>&lt;p>Store，Action 和 Reducer&lt;/p></description></item><item><title>WebWorker</title><link>https://blog.visionary.top/blog/webworker/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/webworker/</guid><description>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。
Web Worker 使用教程 Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行
Web Worker 有以下几个使用注意点。 （1）同源限制
分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。
（2）DOM 限制
Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。
（3）通信联系
Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。
（4）脚本限制
Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。
（5）文件限制
Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。 主线程
var worker = new Worker(&amp;#39;work.js&amp;#39;); worker.postMessage(&amp;#39;Hello World&amp;#39;); worker.postMessage({method: &amp;#39;echo&amp;#39;, args: [&amp;#39;Work&amp;#39;]}); 子线程
worker.onmessage = function (event) { console.log(&amp;#39;Received message &amp;#39; + event.data); doSomething(); } function doSomething() { // 执行任务 worker.</description></item><item><title>关于宏观任务与微观任务</title><link>https://blog.visionary.top/blog/qa/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E7%9B%B8%E5%85%B3/</guid><description>&lt;p>宿主（浏览器）发起的任务我们可以称之为宏观任务（macrotask）；引擎（js）自己也可以发起任务，这个任务就叫做微观任务（microtask）&lt;/p></description></item><item><title>浏览器的同源策略</title><link>https://blog.visionary.top/blog/security/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/security/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</guid><description>同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。
不同源
https http 不同源 端口不同 不同源 域名不同 不同源
跨源数据存储访问 访问存储在浏览器中的数据，如 localStorage 和 IndexedDB，是以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 JavaScript 脚本不能对属于其它源的数据进行读写操作。
Cookies 使用不同的源定义方式。一个页面可以为本域和其父域设置 cookie，只要是父域不是公共后缀（public suffix）即可。
Internet Explorer 使用其内部的方法来检测域是否是公共后缀。不管使用哪个协议（HTTP/HTTPS）或端口号，浏览器都允许给定的域以及其任何子域名(sub-domains) 访问 cookie。当你设置 cookie 时，你可以使用 Domain、Path、Secure、和 HttpOnly 标记来限定其可访问性。当你读取 cookie 时，你无法知道它是在哪里被设置的。 即使您只使用安全的 https 连接，您看到的任何 cookie 都有可能是使用不安全的连接进行设置的。
跨域携带 Cookie // 被请求的站点 Access-Control-Allow-Origin: a.com //这里需要换成相应的发起请求的域名 Access-Control-Allow-Credentials: true // 请求站点 xhr = new XMLHttpRequest(); xhr.withCredentials= true; //关键句 xhr.open(&amp;#34;GET&amp;#34;, url); xhr.send();</description></item><item><title>code spilt show</title><link>https://blog.visionary.top/blog/md/markdown/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/md/markdown/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>Github sun module</title><link>https://blog.visionary.top/blog/github/github-sunmoudle-58cbca6eaada4bc6a5fc8ba40a41e4fc/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/github/github-sunmoudle-58cbca6eaada4bc6a5fc8ba40a41e4fc/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>js 代码规范 - clean code</title><link>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/cleancode/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/cleancode/</guid><description>&lt;p>编写代码应该遵循的原则&lt;/p></description></item><item><title>js 代码规范 - eslint属性</title><link>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/eslint/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/eslint/</guid><description/></item><item><title>js 代码规范 - less规范</title><link>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/less%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/less%E8%A7%84%E8%8C%83/</guid><description/></item><item><title>js 代码规范 - sass规范</title><link>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/sass%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/sass%E8%A7%84%E8%8C%83/</guid><description/></item><item><title>js中几个遍历数组方法的特点</title><link>https://blog.visionary.top/blog/js/arrayergodic/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/arrayergodic/</guid><description/></item><item><title>js中的this总结</title><link>https://blog.visionary.top/blog/js/js%E4%B8%AD%E7%9A%84this%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/js%E4%B8%AD%E7%9A%84this%E6%80%BB%E7%BB%93/</guid><description>&lt;p>js中的this总结&lt;/p></description></item><item><title>lighthouse</title><link>https://blog.visionary.top/blog/performance/chrome-lighthouse-13fbc0f207184e848d9fb68069955f3e/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/performance/chrome-lighthouse-13fbc0f207184e848d9fb68069955f3e/</guid><description>&lt;p>Performance&lt;/p></description></item><item><title>linux 属性</title><link>https://blog.visionary.top/blog/devops/linux-%E5%B1%9E%E6%80%A7-29f7f4ed710143f09991232dd9129275/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/devops/linux-%E5%B1%9E%E6%80%A7-29f7f4ed710143f09991232dd9129275/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>react 一些不常用API的示例</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/portals/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/portals/</guid><description>写法在内部 实际渲染在同级 Example: Portals - by Dan Abramov</description></item><item><title>spider-tool</title><link>https://blog.visionary.top/blog/spider-tool/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/spider-tool/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>spider-vision</title><link>https://blog.visionary.top/blog/spider-vision/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/spider-vision/</guid><description/></item><item><title>tsconfig.json 属性一览 &amp; Module 对比</title><link>https://blog.visionary.top/blog/ts/tsconfig/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/ts/tsconfig/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>TypeScript Basic</title><link>https://blog.visionary.top/blog/ts/typescriptbasic/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/ts/typescriptbasic/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>vagrant</title><link>https://blog.visionary.top/blog/devops/vagrant-9fbb4bfa82df463a88b7f9b7fa2a26c0/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/devops/vagrant-9fbb4bfa82df463a88b7f9b7fa2a26c0/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>一些Linux上的包</title><link>https://blog.visionary.top/blog/devops/%E4%B8%80%E4%BA%9Blinux%E4%B8%8A%E7%9A%84%E5%8C%85-94f34b6873374d169ce06af95b4c425d/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/devops/%E4%B8%80%E4%BA%9Blinux%E4%B8%8A%E7%9A%84%E5%8C%85-94f34b6873374d169ce06af95b4c425d/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>使用Hugo搭一个自己Blog</title><link>https://blog.visionary.top/blog/utils/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1blog/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/utils/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1blog/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>使用npm上发布自己的包</title><link>https://blog.visionary.top/blog/publishednpmpackge/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/publishednpmpackge/</guid><description>&lt;p>使用npm上发布自己的包&lt;/p></description></item><item><title>双向链表</title><link>https://blog.visionary.top/blog/algorithms/doublylinkedlist/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/doublylinkedlist/</guid><description>export default class DoublyLinkedListNode { constructor(value, next = null, previous = null) { this.value = value; this.next = next; this.previous = previous; } toString(callback) { return callback ? callback(this.value) : `${this.value}`; } }</description></item><item><title>各种工具合集</title><link>https://blog.visionary.top/blog/utils/%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/utils/%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>如何使用Whistle抓包</title><link>https://blog.visionary.top/blog/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8whistle%E6%8A%93%E5%8C%85-af3be691cfd1472a9dfbecd05a0e0769/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/network/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8whistle%E6%8A%93%E5%8C%85-af3be691cfd1472a9dfbecd05a0e0769/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>新搭一个框架要做的事情</title><link>https://blog.visionary.top/blog/framework/%E6%96%B0%E6%90%AD%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/framework/%E6%96%B0%E6%90%AD%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</guid><description>&lt;p>新搭建一个前端项目的时候，必须要做的事情&lt;/p></description></item><item><title>链表</title><link>https://blog.visionary.top/blog/algorithms/linkedlist/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/linkedlist/</guid><description>&lt;p>使用js实现链表&lt;/p></description></item><item><title>Git Action</title><link>https://blog.visionary.top/blog/github/github-action-62a4ecf1395640759a428b91d6ed22df/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/github/github-action-62a4ecf1395640759a428b91d6ed22df/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>github操作驱动一系列命令&lt;/p>
&lt;p>这里是描述&lt;/p>
&lt;p>还可以写更多&lt;/p></description></item><item><title>Github Fork</title><link>https://blog.visionary.top/blog/github/github-fork-40a066569c71410791397d8e1b1a48d4/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/github/github-fork-40a066569c71410791397d8e1b1a48d4/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>performance &amp; source的使用</title><link>https://blog.visionary.top/blog/chrome/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/chrome/</guid><description>performance &amp;amp; source的使用 如何debug &amp;amp; 放大局部
network方面 加载了2个文件 html js 顺序执行 innerHTML方法
call stack</description></item><item><title>About Me</title><link>https://blog.visionary.top/about/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/about/</guid><description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.</description></item><item><title>MAC 上好用的快捷键</title><link>https://blog.visionary.top/blog/utils/mackaymap/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/utils/mackaymap/</guid><description>Press CTRL+ALT+Deleteto end the session. .. 按住command点击链接可以新标签打开</description></item><item><title>Markdown Syntax Guide</title><link>https://blog.visionary.top/blog/md/markdown-syntax/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/md/markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://blog.visionary.top/blog/md/math-typesetting/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/md/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title>Rich Content</title><link>https://blog.visionary.top/blog/md/rich-content/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/md/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a href="https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes">Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a href="https://gohugo.io/about/hugo-and-gdpr/">Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;h2 id="heading">&lt;/h2></description></item><item><title>如何优化你的前端项目</title><link>https://blog.visionary.top/blog/framework/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/framework/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</guid><description/></item><item><title>react 源码阅读 - Hooks</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/hooks/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/hooks/</guid><description>有那些hooks
useState useReducer ##useEffect
##useContext
##useRef</description></item><item><title>react &amp; reactDOM API</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/reactbasic/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/reactbasic/</guid><description>react v17.0.2 概述 react 整个项目的架构
读源码的有什么用
react react-dom React Top-Level API Components
React.Component 使用方式 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } &amp;lt;Welcome/&amp;gt; 源码
function Component(props, context, updater) { this.props = props; this.context = context; // If a component has string refs, we will assign a different object later. this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the // renderer.</description></item><item><title>react 源码阅读 - diff 算法</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/diff%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/diff%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description>详细写了 diff 算法的原理，写了示例，分析了源码，加了注释
// TODO 有空加一个可debug的demo 还有 模拟一个可test的简易diff
可检查[1,2,3] [{props:{children:[]},next:''},{},{}]
版本 v17.0.2 diff 算法只对同级元素进行
diff算法比较的是什么 当前页面中的DOM节点对应的fiber节点 🆚 新一次render的结果生成的filter节点 生成的workInProgress Fiber 将被渲染到页面 diff算法的作用 找到可复用的fiber节点，提高效率 diff算法由什么触发 reconcile child fibers diff算法在哪个阶段执行 diff 就是在 遍历 - 打标记，知道resultingFirstChild 记录了新的fiber树 // TODO // new children debug看一下 // oldFiber debug看一下
单节点 / 调和单节点 对于object/number/string
先检查上次更新时fiber节点是否存在对应DOM - 即检查是不是首次渲染，渲染过才有DOM
如果不存在对应DOM，则直接新生成新节点返回
要是存在对应DOM，继续检查是否可复用 - key &amp;amp; type相同
可复用的话，将节点新生成一个副本返回
不可复用的话，将DOM标记为需要删除，再新生成节点返回
&amp;lt;div&amp;gt;old&amp;lt;/div&amp;gt; // ⬇️ type &amp;amp; key = null 没变; children改变，div 可复用，标记child需要更新 &amp;lt;div&amp;gt;new&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;old&amp;lt;/div&amp;gt; // ⬇️ type改变 直接标记div为delection 新生成 p-&amp;gt; new 返回 &amp;lt;p&amp;gt;new&amp;lt;/p&amp;gt; &amp;lt;div key=&amp;#34;old&amp;#34;&amp;gt;old&amp;lt;/div&amp;gt; // ⬇️ key 改变 不可复用 &amp;lt;div key=&amp;#34;new&amp;#34;&amp;gt;old&amp;lt;/div&amp;gt; 多节点 对于 array</description></item><item><title>react 源码阅读 - setState</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/setstate/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/setstate/</guid><description>Component.prototype.setState = function (partialState, callback) { this.updater.enqueueSetState(this, partialState, callback, &amp;#39;setState&amp;#39;); }; function enqueueSetState(inst, payload, callback) { // ... // 存在来updatel里 update.payload = payload; // 将update插入updateQueue // 调度update enqueueUpdate(fiber, update, lane); scheduleUpdateOnFiber(fiber, lane, eventTime); }</description></item><item><title>react 源码阅读 - show with code</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E7%BB%93%E5%90%88%E5%AE%9E%E6%88%98/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E7%BB%93%E5%90%88%E5%AE%9E%E6%88%98/</guid><description/></item><item><title>react 源码阅读 - ssr</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</guid><description/></item><item><title>react 源码阅读 - 名词 &amp; 数据结构</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/</guid><description/></item><item><title>react 源码阅读 - 流程</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%B5%81%E7%A8%8B/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>React16架构&lt;/p>
&lt;ul>
&lt;li>scheduler 调度 【v15没有】
&lt;blockquote>
&lt;p>调度任务的优先级，高优任务优先进入Reconciler
到底是怎么调度的？
react v18的并发模式 Concurrent Mode&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>reconciler 协调
&lt;blockquote>
&lt;p>负责找出变化的组件&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>renderer 渲染
&lt;blockquote>
&lt;p>负责将变化的组件渲染到页面上&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>关于xss注入式攻击</title><link>https://blog.visionary.top/blog/security/%E5%85%B3%E4%BA%8Exss%E6%B3%A8%E5%85%A5%E5%BC%8F%E6%94%BB%E5%87%BB/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/security/%E5%85%B3%E4%BA%8Exss%E6%B3%A8%E5%85%A5%E5%BC%8F%E6%94%BB%E5%87%BB/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p></description></item><item><title>Micro-Frontends with qiankun</title><link>https://blog.visionary.top/blog/framework/micro-frontend-with-qiankun/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/framework/micro-frontend-with-qiankun/</guid><description>&lt;p>可以实现多团队共同开发，每个团队维护使用了不同前端框架的项目，独立使用git，也可以在新网站上集成旧项目&lt;/p>
&lt;h2 id="heading">&lt;/h2></description></item><item><title>Grunt的使用及配置</title><link>https://blog.visionary.top/blog/framework/grunt%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%85%8D%E7%BD%AE-b577330103114b3d994bb858f7ee10b1/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/framework/grunt%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%85%8D%E7%BD%AE-b577330103114b3d994bb858f7ee10b1/</guid><description>&lt;p>一个用来打包编译js/ts项目的工具&lt;/p>
&lt;p>可以使用不同的plugins达到要的效果&lt;/p></description></item><item><title>Css Reference Sheet</title><link>https://blog.visionary.top/blog/style/css-reference-sheet/</link><pubDate>Sun, 14 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/style/css-reference-sheet/</guid><description>&lt;p>常用的一些css显示效果&lt;/p></description></item><item><title>zsh常用配置等</title><link>https://blog.visionary.top/blog/utils/zsh/</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/utils/zsh/</guid><description/></item><item><title>Dijkstra Algorithm</title><link>https://blog.visionary.top/blog/algorithms/graph/dijkstraalgorithm/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/graph/dijkstraalgorithm/</guid><description>finding the shortest paths to all graph vertices from single vertex 从单顶点找到所有图形顶点的最短路径</description></item><item><title>Dijkstra Algorithm</title><link>https://blog.visionary.top/blog/algorithms/graph/primsalgorithm/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/graph/primsalgorithm/</guid><description>finding Minimum Spanning Tree (MST) for weighted undirected graph 找到加权无向图的最小生成树（MST）</description></item><item><title>js基础问题</title><link>https://blog.visionary.top/blog/js/js%E5%9F%BA%E7%A1%80/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/js%E5%9F%BA%E7%A1%80/</guid><description>&lt;p>一些js中的一些基础问题&lt;/p>
&lt;p>变量提升/this指向/指针/类型转换/迭代/模块化/promise 等&lt;/p></description></item><item><title>react 代码规范</title><link>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/react%E8%A7%84%E8%8C%83/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/react%E8%A7%84%E8%8C%83/</guid><description/></item><item><title>关于参数校验</title><link>https://blog.visionary.top/blog/%E5%85%B3%E4%BA%8E%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/%E5%85%B3%E4%BA%8E%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</guid><description>一些常用的库 ajv 9.6 Joi 68.9k
yup 14k</description></item><item><title/><link>https://blog.visionary.top/blog/algorithms/-queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/-queue/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/red-blacktree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/red-blacktree/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/sort/bubblesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/sort/bubblesort/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/sort/heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/sort/heapsort/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/sort/mergesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/sort/mergesort/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/sort/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/sort/quicksort/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/sort/selectionsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/sort/selectionsort/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/stack/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/algorithms/%E5%8F%8C%E6%8C%87%E9%92%88%E9%81%8D%E5%8E%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/algorithms/%E5%8F%8C%E6%8C%87%E9%92%88%E9%81%8D%E5%8E%86/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/js/js%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/js%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/js/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/js/%E5%B0%8F%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/js/%E5%B0%8F%E8%AE%B0/</guid><description>6.系统可能不会保存你所做的修改 onbeforeunload // 监听页面关闭 window.addEventListener(&amp;#39;beforeunload&amp;#39;, (e) =&amp;gt; { let changeSymbol = false if(changeSymbol) { return (e.returnValue = &amp;#39;有信息未保存，确认离开？！&amp;#39;); } // return null; // 不会弹框 // return true // 会弹框 })</description></item><item><title/><link>https://blog.visionary.top/blog/media/hls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/media/hls/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/media/stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/media/stream/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/media/web-rtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/media/web-rtc/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/qa/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/http/http2/</guid><description>HTTP/2的优势 （1）多路复用 所以浏览器会限制同一个域的同时请求数，Chrome是限制6个，总连接数是17个</description></item><item><title/><link>https://blog.visionary.top/blog/qa/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</guid><description>window.performance FP和FCP
const paint = window.performance.getEntriesByType(&amp;#39;paint&amp;#39;); const FP = paint[0].startTime, const FCP = paint[1].startTime, LCP
function getLCP() { // 增加一个性能条目的观察者 new PerformanceObserver((entryList, observer) =&amp;gt; { let entries = entryList.getEntries(); const lastEntry = entries[entries.length - 1]; observer.disconnect(); console.log(&amp;#39;LCP&amp;#39;, lastEntry.renderTime || lastEntry.loadTime); }).observe({entryTypes: [&amp;#39;largest-contentful-paint&amp;#39;]}); } export function listenerError() { window.addEventListener(&amp;#39;error&amp;#39;, (event) =&amp;gt; { if (event.target.localName) { console.log(&amp;#39;这是资源错误&amp;#39;, event); } else { console.log(&amp;#39;这是代码错误&amp;#39;, event); } }, true) } 3.2上报</description></item><item><title/><link>https://blog.visionary.top/blog/qa/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/qa/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid><description>浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程（某些情况下多个tab会合并进程）。 每一个tab页面可以看作是浏览器内核进程，然后这个进程是多线程的，它有几大类子线程： GUI线程
JS引擎线程
事件触发线程
定时器线程
网络请求线程</description></item><item><title/><link>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/react-ssr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E4%BD%BF%E7%94%A8/react-ssr/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react/</guid><description>fixtures/packaging/babel-standalone/dev.html
&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;../../../build/node_modules/react/umd/react.development.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;../../../build/node_modules/react-dom/umd/react-dom.development.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.com/babel-standalone@6/babel.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/babel&amp;#34;&amp;gt; ReactDOM.render( &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;, document.getElementById(&amp;#39;container&amp;#39;) ); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 调用 ReactDOM.render发生了什么
render 实际就是计算差异 &amp;amp; commit render 调用栈内有一系列操作 render后最先调用的是legacyRenderSubtreeIntoContainer json形式的elements作为children传入 packages/react-dom/src/client/ReactDOMLegacy.js 第一次是没有root的 会执行initial mount fiberRoot是？整个应用的根结点 定义了root之后 unbatchedUpdates
unbatchedUpdates(() =&amp;gt; { updateContainer(children, fiberRoot, parentComponent, callback); }); Fiber架构 在此处理过context
function legacyRenderSubtreeIntoContainer( parentComponent: ?React$Component&amp;lt;any, any&amp;gt;, children: ReactNodeList, container: Container, forceHydrate: boolean, callback: ?Function, ) { } tips: $0 即 可选中标签 $0.
GUI渲染线程 JS线程 所以JS脚本执行和浏览器布局、绘制不能同时执行。 JS脚本执行 &amp;mdash;&amp;ndash; 样式布局 &amp;mdash;&amp;ndash; 样式绘制 主流浏览器刷新频率为60Hz，即每（1000ms / 60Hz）16.</description></item><item><title/><link>https://blog.visionary.top/blog/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/resume/</guid><description/></item><item><title/><link>https://blog.visionary.top/blog/ts/react%E4%B8%AD%E7%9A%84type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/ts/react%E4%B8%AD%E7%9A%84type/</guid><description/></item><item><title>各种工具合集</title><link>https://blog.visionary.top/blog/framework/%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84babel-register-%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3-2021-7-07ce4d45319d46b39edf9777ea8b8151/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/framework/%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84babel-register-%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3-2021-7-07ce4d45319d46b39edf9777ea8b8151/</guid><description>&lt;p>xss &amp;amp; csrf 都是窃token cookie之类的敏感信息&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery - Wikipedia&lt;/a>&lt;/p></description></item></channel></rss>