<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端性能 on VISIONARY</title><link>https://visionary.top/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/</link><description>Recent content in 前端性能 on VISIONARY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://visionary.top/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>WebWorker</title><link>https://visionary.top/blog/webworker/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://visionary.top/blog/webworker/</guid><description>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。
Web Worker 使用教程 Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行
Web Worker 有以下几个使用注意点。 （1）同源限制
分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。
（2）DOM 限制
Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。
（3）通信联系
Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。
（4）脚本限制
Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。
（5）文件限制
Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。 主线程
var worker = new Worker(&amp;#39;work.js&amp;#39;); worker.postMessage(&amp;#39;Hello World&amp;#39;); worker.postMessage({method: &amp;#39;echo&amp;#39;, args: [&amp;#39;Work&amp;#39;]}); 子线程
worker.onmessage = function (event) { console.log(&amp;#39;Received message &amp;#39; + event.data); doSomething(); } function doSomething() { // 执行任务 worker.</description></item></channel></rss>