<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on VISIONARY</title><link>https://blog.visionary.top/categories/react/</link><description>Recent content in react on VISIONARY</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.visionary.top/categories/react/index.xml" rel="self" type="application/rss+xml"/><item><title>react 一些不常用API的示例</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/portals/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/portals/</guid><description>写法在内部 实际渲染在同级 Example: Portals - by Dan Abramov</description></item><item><title>spider-vision</title><link>https://blog.visionary.top/blog/spider-vision/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/spider-vision/</guid><description/></item><item><title>react 源码阅读 - Hooks</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/hooks/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/hooks/</guid><description>有那些hooks
useState useReducer ##useEffect
##useContext
##useRef</description></item><item><title>react &amp; reactDOM API</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/reactbasic/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/reactbasic/</guid><description>react v17.0.2 概述 react 整个项目的架构
读源码的有什么用
react react-dom React Top-Level API Components
React.Component 使用方式 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } &amp;lt;Welcome/&amp;gt; 源码
function Component(props, context, updater) { this.props = props; this.context = context; // If a component has string refs, we will assign a different object later. this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the // renderer.</description></item><item><title>react 源码阅读 - diff 算法</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/diff%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/diff%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description/></item><item><title>react 源码阅读 - setState</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/setstate/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/setstate/</guid><description>Component.prototype.setState = function (partialState, callback) { this.updater.enqueueSetState(this, partialState, callback, &amp;#39;setState&amp;#39;); }; function enqueueSetState(inst, payload, callback) { // ... // 存在来updatel里 update.payload = payload; // 将update插入updateQueue // 调度update enqueueUpdate(fiber, update, lane); scheduleUpdateOnFiber(fiber, lane, eventTime); }</description></item><item><title>react 源码阅读 - show with code</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E7%BB%93%E5%90%88%E5%AE%9E%E6%88%98/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E7%BB%93%E5%90%88%E5%AE%9E%E6%88%98/</guid><description/></item><item><title>react 源码阅读 - ssr</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</guid><description/></item><item><title>react 源码阅读 - 名词 &amp; 数据结构</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D/</guid><description/></item><item><title>react 源码阅读 - 流程</title><link>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%B5%81%E7%A8%8B/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://blog.visionary.top/blog/react%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/react%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>React16架构&lt;/p>
&lt;ul>
&lt;li>scheduler 调度 【v15没有】
&lt;blockquote>
&lt;p>调度任务的优先级，高优任务优先进入Reconciler
到底是怎么调度的？
react v18的并发模式 Concurrent Mode&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>reconciler 协调
&lt;blockquote>
&lt;p>负责找出变化的组件&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>renderer 渲染
&lt;blockquote>
&lt;p>负责将变化的组件渲染到页面上&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item></channel></rss>